#!/usr/bin/env ruby

require 'erb'
require 'fileutils'
require 'kramdown'
require 'pathname'
require 'pry'
require 'yaml'

class Pica
  VERSION = '0.1.0'

  def initialize(path='.', config_file: 'config.yml')
    # NOTE: not sure if we need to store this as an attribute
    @config_path = Pathname.new(path).join(config_file).expand_path
    @config = Pica::Config.from_yaml(@config_path)
  end

  def generate
    @config['pages'].each { |page| generate_recursive(page) }
  end

  def self.generate
    self.new.generate
  end

  private

  def generate_recursive(page)
    src_file = @config.src_file_for_path(page['path'])
    dest_file = @config.dest_file_for_path(page['path'])

    input = File.read src_file
    content = Kramdown::Document.new(input).to_html

    templated = Pica::Template.render(content, @config)

    FileUtils.mkdir_p dest_file.dirname
    File.write dest_file, templated

    generate_recursive(page) if page['pages']
  end
end


class Pica::Config::InvalidConfigError < StandardError
end


class Pica::Config
  def initialize(config)
    validate_config(config)
    @config = config
  end

  def [](key)
    @config[key]
  end

  def src_file_for_path(path)
    Pathname(@config['pica_src_dir'])
      .join(path)
      .expand_path
  end

  def dest_file_for_path(path)
    Pathname(@config['pica_dest_dir'])
      .join(path)
      .expand_path
      .sub_ext(@config['pica_publish_format_ext'])
  end

  def self.from_yaml(config_filepath)
    self.new YAML.load(File.read(config_filepath))
  end

  private

  def validate_config(config)

  end
end


class Pica::Template
  def initialize(content, config)
    @content = content
    @config = config

    @template = ERB.new(File.read('template.html'))
  end

  def render
    @template.result(binding)
  end

  def self.render(content, config)
    self.new(content, config).render
  end
end


Pica.generate
